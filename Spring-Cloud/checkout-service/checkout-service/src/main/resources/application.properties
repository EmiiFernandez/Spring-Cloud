spring.application.name = checkout-service
server.port=8082

spring.cloud.config.discovery.enabled=true
spring.cloud.config.discovery.serviceId=config-service

spring.config.import=optional:configserver:

eureka.instance.hostname=localhost

##Config LoadBalancer
##client.name se usa tanto en Random como en Robin
loadbalancer.client.name=products-service
##Config para personalizar el peso para cada instancia en Robin
spring.cloud.loadbalancer.configurations=weighted

#Config Circuit Breaker
#luego de instances se encuentra .product que es el nombre del cliente que vamos a instanciar
#.product --> es un nombre que elegimos nosotros para este Circuit Breaker, ya que
#podemos tener otro CB configurado en el mismo servicio pero con otro cliente

#CB se integra con actuartor
resilience4j.circuitbreaker.instances.product.allowHealthIndicatorToFail = false
#Habilita a CB que pueda modificar el estado de un microservicio (UP - DOWN)
#Al ponerlo en false, el CB, no dará de baja el servicio si entra en estado open
resilience4j.circuitbreaker.instances.product.registerHealthIndicator = true
#Nos permite agregar información del CB en el endpoint de salud de actuator

#Config. propia del patrón CB para cambio de estados
resilience4j.circuitbreaker.instances.product.slidingWindowType = COUNT_BASED
#Para realizar un análisis le decimos que esperemos una cantidad de eventos para tomar
#una decisión en el cambio de estado
#Podríamos configurarlo para que espere una cant. de tiempo o eventos
resilience4j.circuitbreaker.instances.product.slidingWindowsSize = 5
#Cantidad de eventos antes de realizar el análisis.
#Luego de 5 solicitudes que le envíe checkout service a product service haremos el
#análisis y el CB evaluará el estado
resilience4j.circuitbreaker.instances.product.failureRateThreshold = 50
#Porcentaje de falla
#Luego que se realicen las 5 solicitudes se realiza el análisis. Si el fallo es mayor
#o igual al 50% el CB cambiará su estado a Open

#Config para cuando CB se encuentra en Open o Half Open
resilience4j.circuitbreaker.instances.product.waitDurationInOpenState = 15000
#Cuanto tiempo esperar para pasar a Half Open
#15000 son 15 seg.
resilience4j.circuitbreaker.instances.product.permittedNumberOfCallsInHalfOpenState = 3
#Cuantas solicitudes dejaremos que pasen a product service antes de hacer un análisis
#Usa el valor de failureRateThreshold
#En este caso: si es >=50% vuelve a Open. <50% vuelve a Close
resilience4j.circuitbreaker.instances.product.automaticTransitionFromOpenToHalfOpenEnabled = true
#Permitir una automática transición de los estados Open a Half Open
#Esta relacionado con waitDurationInOpenState