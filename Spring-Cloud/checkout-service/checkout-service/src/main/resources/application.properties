spring.application.name = checkout-service
server.port=8082

spring.cloud.config.discovery.enabled=true
spring.cloud.config.discovery.serviceId=config-service

spring.config.import=optional:configserver:


# Configuracion de Eureka Server
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/

# Configuracion para que Eureka utilice la IP del contenedor en lugar del nombre de host
eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

# Configuracion para el registro seguro en Eureka Server
eureka.instance.metadata-map.management.port=${server.port}
eureka.instance.metadata-map.management.context-path=${server.servlet.context-path}/actuator


#Config actuactor
management.endpoints.web.exposure.include= health,info,circuitbreakers, circuitbreakerevents
#Health lo vamos a utilizar para que nos brinde informacion del CB
management.health.circuitbreakers.enabled = true
#Habilitaremos que actuactor nos brinde mas informacion
management.endpoint.health.show-details=always

##Config LoadBalancer
##client.name se usa tanto en Random como en Robin
loadbalancer.client.name=products-service
##Config para personalizar el peso para cada instancia en Robin
spring.cloud.loadbalancer.configurations=weighted

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8080/realms/dh


#Config Circuit Breaker
#luego de instances se encuentra .product que es el nombre del cliente que vamos a instanciar
#.product --> es un nombre que elegimos nosotros para este Circuit Breaker, ya que
#podemos tener otro CB configurado en el mismo servicio pero con otro cliente

#CB se integra con actuartor
resilience4j.circuitbreaker.instances.product.allowHealthIndicatorToFail = false
#Habilita a CB que pueda modificar el estado de un microservicio (UP - DOWN)
#Al ponerlo en false, el CB, no dara de baja el servicio si entra en estado open
resilience4j.circuitbreaker.instances.product.registerHealthIndicator= true
#Nos permite agregar informacion del CB en el endpoint de salud de actuator

#Config. propia del patron CB para cambio de estados
resilience4j.circuitbreaker.instances.product.slidingWindowType=COUNT_BASED
#Para realizar un analisis le decimos que esperemos una cantidad de eventos para tomar
#una decision en el cambio de estado
#Podriamos configurarlo para que espere una cant. de tiempo o eventos
resilience4j.circuitbreaker.instances.product.slidingWindowSize = 5
#Cantidad de eventos antes de realizar el analisis.
#Luego de 5 solicitudes que le envie checkout service a product service haremos el
#analisis y el CB evaluara el estado
resilience4j.circuitbreaker.instances.product.failureRateThreshold= 50
#Porcentaje de falla
#Luego que se realicen las 5 solicitudes se realiza el analisis. Si el fallo es mayor
#o igual al 50% el CB cambiara su estado a Open

#Config para cuando CB se encuentra en Open o Half Open
resilience4j.circuitbreaker.instances.product.waitDurationInOpenState = 15000
#Cuanto tiempo esperar para pasar a Half Open
#15000 son 15 seg.
resilience4j.circuitbreaker.instances.product.permittedNumberOfCallsInHalfOpenState = 3
#Cuantas solicitudes dejaremos que pasen a product service antes de hacer un analisis
#Usa el valor de failureRateThreshold
#En este caso: si es >=50% vuelve a Open. <50% vuelve a Close
resilience4j.circuitbreaker.instances.product.automaticTransitionFromOpenToHalfOpenEnabled = true
#Permitir una automatica transicion de los estados Open a Half Open
#Esta relacionado con waitDurationInOpenState

#Configuracion de reintentos - Ya esta en la biblioteca de CB
#Cantidad max de reintentos
resilience4j.retry.instances.product.maxAttempts = 3
#Tiempo entre reintentos (milisegundos)
resilience4j.retry.instances.product.waitDuration = 500
#Config para determinar con determinada excepcion sucesa el reintento
#En esta caso elegimos un error 500 que es el error que no da Feign
#feign.FeignException$InternalServerError lo sacamos de la consola, el error que
#tira cuando ejecturamos en Postman checkout?productIds.....
#Es un array por eso que se pone [0]
#no es necesario que se llame product como en CB
resilience4j.retry.instances.product.retryExceptions[0]=feign.FeignException$InternalServerError

#Config Zipkin
#Le estamos pidiendo que envie todas las trazas que genere 1.0 (100%)
#Podriamos mandar un % menor (Ej: 0.2 -20%-)
management.tracing.sampling.probability=1.0

#Config logs ELK
logging.file.name=../../../../Logs/checkout-service.log